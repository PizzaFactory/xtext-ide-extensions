#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = Xtext
file_extensions []     = xtext;

################################################################
## Styles
################################################################

styles [] {

.comment_multiline : style {
   color                 = light_green
   italic                = true
   ace_scope             = comment.block
   textmate_scope        = comment.block
   pygments_scope        = Comment.Multiline
}

.comment_singleline : style {
   color                 = green
   italic                = true
   ace_scope             = comment.line.double-slash
   textmate_scope        = comment.line.double-slash
   pygments_scope        = Comment.Single
}

.keyword : style {
   color                 = violet_red
   bold                  = true
   ace_scope             = keyword.control
   textmate_scope        = keyword.control
   pygments_scope        = Keyword
}

.name : style {
   color                 = light_yellow
   ace_scope             = entity.name
   textmate_scope        = entity.name
   pygments_scope        = Name.Entity
}

.annotation : style {
   color                 = gold
   ace_scope             = support.type
   textmate_scope        = support.type
   pygments_scope        = Name.Attribute
}

.punctuation : style {
   color                 = red
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.operator : style {
   color                 = yellow
   ace_scope             = keyword.operator
   textmate_scope        = keyword.operator
   pygments_scope        = Operator
}

.string_double_quoted : style {
   color                 = light_blue
   ace_scope             = string.quoted.double
   textmate_scope        = string.quoted.double
   pygments_scope        = String.Double
}

.string_single_quoted : style {
   color                 = light_blue
   ace_scope             = string.quoted.single
   textmate_scope        = string.quoted.single
   pygments_scope        = String.Single
}

.whitespace : style {
   ace_scope             = whitespace
   textmate_scope        = whitespace
   pygments_scope        = Generic
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {
   : include "grammar" ;
}

grammar : context {

   : include "multi_line_comment" ;
   : include "single_line_comment" ;
   

   : include "Keywords";   
   : include "Operators";
   : include "Punctuation";
   
   : include "Action";
   : include "FeatureAssignment";
   : include "fullQualifiedName";
   : include "escapedName";

   : include "Annotation";
   : include "STRING";

   : pattern {
      regex          \= ([^\s])
      styles []       = .illegal;
   }
   
}

Keywords: context {
   : pattern {
      regex       \= (\bgrammar\b)|(\bwith\b)|(\bhidden\b)|(\bgenerate\b)|(\bas\b)|(\bimport\b)|(\bfragment\b)|(\breturns\b)|(\btrue\b)(\bfalse\b)|(\bterminal\b)|(\bfragment\b)|(\breturns\b)|(\bEOF\b)|(\benum\b)|(\beturns\b)
      styles []    = .keyword ; 
   }
}

Punctuation: context {
   : pattern { 
      regex       \= (,|\,|:|;|<|>|\(|\))
      styles []    = .punctuation ;
   }
}

Operators: context {
   : pattern { 
      regex       \= (\*|&|\?|\*|\+|\||&|!|(=>)|(\.\.)|(\->)|\[|\])
      styles []    = .operator ;
   }
}
fullQualifiedName : context {
   : pattern {
      regex          \= (\^?(?:\w+::)?\b\w+(\.|\$\w+)*\b)
      styles []       = .name;
   }
}

escapedName : context {
   description = for ^ escaped names 
   : pattern {
      regex       \= (\^\w+)
      styles []    = .name;
   }
}

Action : context {
   : pattern {
      regex       \= ({)((?:\w+::)?\^?\w+\.?\w*)(\s*)(\+?=?)(\s*)((?:current)?)(})
      styles []    = .punctuation, .name, .whitespace, .operator, .whitespace, .keyword, .punctuation;
   }
}

Annotation : context {
   : pattern {
      regex       \= (@\w+)
      styles []    = .annotation ;
   }
}

FeatureAssignment : context {
   : pattern {
      regex       \= (\^?\w+)(\s*)((?:[\+\?]=)|(?:=))
      styles[]    = .name, .whitespace, .operator;
   }
}

###########################################
## Terminals
###########################################

single_line_comment : context {
   description        = singleline comment
   : pattern {
      regex          \= (//.*)
      styles []       = .comment_singleline;
   }
}


multi_line_comment : context {
   description        = multiline comment
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment_multiline;
      default_style   = .comment_multiline
      : pop {
         regex       \= (\*/)
         styles []    = .comment_multiline;
      }
   }
}

STRING : context {
   description       = quoted string
   : inline_push {
      regex          \= (\")
      styles []       = .string_double_quoted;
      default_style   = .string_double_quoted
      : pop {
         regex       \= (\")
         styles []    = .string_double_quoted;
      }
   }
   : inline_push {
      regex          \= (\')
      styles []       = .string_single_quoted;
      default_style   = .string_single_quoted
      : pop {
         regex       \= (\')
         styles []    = .string_single_quoted;
      }
   }
}
   
}

